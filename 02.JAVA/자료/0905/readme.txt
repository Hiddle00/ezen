=======================================
[ 참고 URL ] https://ittrue.tistory.com/234

1. MVC 모델
MVC 패턴은 애플리케이션을 개발할 때 사용하는 디자인 패턴이다.
애플리케이션의 개발 영역을 MVC(Model, View, Controller)로 구분하여 각 역할에 맞게 코드를 작성하는 개발 방식이다.
MVC 패턴을 도입하면서 UI 영역과 도메인(비즈니스 로직) 영역으로 구분되어 서로에게 영향을 주지 않으면서 개발과 
유지보수를 가능하게 되었다.

가.  Model(모델)
Spring MVC 기반의 웹 애플리케이션이 클라이언트의 요청을 전달받으면 요청 사항을 처리하기 위한 작업을 한다.
처리한 작업의 결과 데이터를 클라이언트에게 응답을 돌려주어야 하는데, 이때 클라이언트에게 응답으로 돌려주는 작업의 처리 결과 데이터를 Model이라 한다.

나. View(뷰)
View는 Model을 이용하여 웹 브라우저와 같은 애플리케이션의 화면에 보이는 리소스(Resource)를 제공하는 역할을 한다.


다. Controller(컨트롤러)
컨트롤러는 클라이언트 측의 요청을 직접적으로 전달받는 엔드포인트(Endpoint)로써 Model과 View의 중간에서 상호작용을 해주는 역할을 한다.
클라이언트 측의 요청을 전달받아 비즈니스 로직을 거친 후, Model 데이터가 만들어지면, 이 Model 데이터를 View로 전달하는 역할을 한다.

=======================================
2. ModelAndView 클래스란?
ModelAndView는 스프링에서 컨트롤러가 처리한 결과를 보여줄 뷰와 필요한 데이터를 모델에 담아 전달하기 위한 클래스이다. 
ModelAndView는 뷰와 모델을 한 번에 전달할 수 있는 편리한 기능을 제공하여 개발자가 뷰와 모델을 간단하게 관리할 수 있도록 도와준다.

=======================================
3. Spring 웹 어플리케이션 예제 개발 순서

가. Spring Legacy Project 생성

나. web.xml 에서 <filter> 태그를 이용한 한글처리 설정 

다. HomeController 클래스 및 PersonVO 클래스를 이용하여
   home.jsp 에 화면 출력 (EL 사용)
   
라. CalController 클래스를 이용한 계산기 제작
   @RequestParam 개념의 이해

마. PersonController 클래스 제작
   입력데이터에 대한 VO 클래스 맵핑 개념 이해 (ModelAndView 의 이해)


   
   
    